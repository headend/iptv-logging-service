// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: monitor-logging.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MonitorLogsResponseStatus int32

const (
	MonitorLogsResponseStatus_FAIL    MonitorLogsResponseStatus = 0 /// Success
	MonitorLogsResponseStatus_SUCCESS MonitorLogsResponseStatus = 1 /// Failed
)

// Enum value maps for MonitorLogsResponseStatus.
var (
	MonitorLogsResponseStatus_name = map[int32]string{
		0: "FAIL",
		1: "SUCCESS",
	}
	MonitorLogsResponseStatus_value = map[string]int32{
		"FAIL":    0,
		"SUCCESS": 1,
	}
)

func (x MonitorLogsResponseStatus) Enum() *MonitorLogsResponseStatus {
	p := new(MonitorLogsResponseStatus)
	*p = x
	return p
}

func (x MonitorLogsResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitorLogsResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_monitor_logging_proto_enumTypes[0].Descriptor()
}

func (MonitorLogsResponseStatus) Type() protoreflect.EnumType {
	return &file_monitor_logging_proto_enumTypes[0]
}

func (x MonitorLogsResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonitorLogsResponseStatus.Descriptor instead.
func (MonitorLogsResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{0}
}

type MonitorLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AgentId            int64  `protobuf:"varint,2,opt,name=agent_id,proto3" json:"agent_id,omitempty"`
	ProfileId          int64  `protobuf:"varint,3,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	MonitorId          int64  `protobuf:"varint,4,opt,name=monitor_id,proto3" json:"monitor_id,omitempty"`
	ChannelId          int64  `protobuf:"varint,5,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	ChannelName        string `protobuf:"bytes,6,opt,name=channel_name,proto3" json:"channel_name,omitempty"`
	MulticastIp        string `protobuf:"bytes,7,opt,name=multicast_ip,proto3" json:"multicast_ip,omitempty"`
	BeforeStatus       int64  `protobuf:"varint,8,opt,name=before_status,proto3" json:"before_status,omitempty"`
	BeforeSignalStatus bool   `protobuf:"varint,9,opt,name=before_signal_status,proto3" json:"before_signal_status,omitempty"`
	BeforeVideoStatus  bool   `protobuf:"varint,10,opt,name=before_video_status,proto3" json:"before_video_status,omitempty"`
	BeforeAudioStatus  bool   `protobuf:"varint,11,opt,name=before_audio_status,proto3" json:"before_audio_status,omitempty"`
	AfterStatus        int64  `protobuf:"varint,12,opt,name=after_status,proto3" json:"after_status,omitempty"`
	AfterSignalStatus  bool   `protobuf:"varint,13,opt,name=after_signal_status,proto3" json:"after_signal_status,omitempty"`
	AfterVideoStatus   bool   `protobuf:"varint,14,opt,name=after_video_status,proto3" json:"after_video_status,omitempty"`
	AfterAudioStatus   bool   `protobuf:"varint,15,opt,name=after_audio_status,proto3" json:"after_audio_status,omitempty"`
	Description        string `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`
	DateCreate         string `protobuf:"bytes,17,opt,name=date_create,proto3" json:"date_create,omitempty"`
}

func (x *MonitorLogs) Reset() {
	*x = MonitorLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_logging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLogs) ProtoMessage() {}

func (x *MonitorLogs) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_logging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLogs.ProtoReflect.Descriptor instead.
func (*MonitorLogs) Descriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{0}
}

func (x *MonitorLogs) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonitorLogs) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *MonitorLogs) GetProfileId() int64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *MonitorLogs) GetMonitorId() int64 {
	if x != nil {
		return x.MonitorId
	}
	return 0
}

func (x *MonitorLogs) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MonitorLogs) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *MonitorLogs) GetMulticastIp() string {
	if x != nil {
		return x.MulticastIp
	}
	return ""
}

func (x *MonitorLogs) GetBeforeStatus() int64 {
	if x != nil {
		return x.BeforeStatus
	}
	return 0
}

func (x *MonitorLogs) GetBeforeSignalStatus() bool {
	if x != nil {
		return x.BeforeSignalStatus
	}
	return false
}

func (x *MonitorLogs) GetBeforeVideoStatus() bool {
	if x != nil {
		return x.BeforeVideoStatus
	}
	return false
}

func (x *MonitorLogs) GetBeforeAudioStatus() bool {
	if x != nil {
		return x.BeforeAudioStatus
	}
	return false
}

func (x *MonitorLogs) GetAfterStatus() int64 {
	if x != nil {
		return x.AfterStatus
	}
	return 0
}

func (x *MonitorLogs) GetAfterSignalStatus() bool {
	if x != nil {
		return x.AfterSignalStatus
	}
	return false
}

func (x *MonitorLogs) GetAfterVideoStatus() bool {
	if x != nil {
		return x.AfterVideoStatus
	}
	return false
}

func (x *MonitorLogs) GetAfterAudioStatus() bool {
	if x != nil {
		return x.AfterAudioStatus
	}
	return false
}

func (x *MonitorLogs) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MonitorLogs) GetDateCreate() string {
	if x != nil {
		return x.DateCreate
	}
	return ""
}

//*
// Represents the params to identify monitor.
type MonitorLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId            int64  `protobuf:"varint,1,opt,name=agent_id,proto3" json:"agent_id,omitempty"`
	ProfileId          int64  `protobuf:"varint,2,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	MonitorId          int64  `protobuf:"varint,3,opt,name=monitor_id,proto3" json:"monitor_id,omitempty"`
	ChannelId          int64  `protobuf:"varint,4,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	ChannelName        string `protobuf:"bytes,5,opt,name=channel_name,proto3" json:"channel_name,omitempty"`
	MulticastIp        string `protobuf:"bytes,6,opt,name=multicast_ip,proto3" json:"multicast_ip,omitempty"`
	BeforeStatus       int64  `protobuf:"varint,7,opt,name=before_status,proto3" json:"before_status,omitempty"`
	BeforeSignalStatus bool   `protobuf:"varint,8,opt,name=before_signal_status,proto3" json:"before_signal_status,omitempty"`
	BeforeVideoStatus  bool   `protobuf:"varint,9,opt,name=before_video_status,proto3" json:"before_video_status,omitempty"`
	BeforeAudioStatus  bool   `protobuf:"varint,10,opt,name=before_audio_status,proto3" json:"before_audio_status,omitempty"`
	AfterStatus        int64  `protobuf:"varint,11,opt,name=after_status,proto3" json:"after_status,omitempty"`
	AfterSignalStatus  bool   `protobuf:"varint,12,opt,name=after_signal_status,proto3" json:"after_signal_status,omitempty"`
	AfterVideoStatus   bool   `protobuf:"varint,13,opt,name=after_video_status,proto3" json:"after_video_status,omitempty"`
	AfterAudioStatus   bool   `protobuf:"varint,14,opt,name=after_audio_status,proto3" json:"after_audio_status,omitempty"`
	Description        string `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	DateCreate         string `protobuf:"bytes,16,opt,name=date_create,proto3" json:"date_create,omitempty"`
}

func (x *MonitorLogsRequest) Reset() {
	*x = MonitorLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_logging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLogsRequest) ProtoMessage() {}

func (x *MonitorLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_logging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLogsRequest.ProtoReflect.Descriptor instead.
func (*MonitorLogsRequest) Descriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{1}
}

func (x *MonitorLogsRequest) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *MonitorLogsRequest) GetProfileId() int64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *MonitorLogsRequest) GetMonitorId() int64 {
	if x != nil {
		return x.MonitorId
	}
	return 0
}

func (x *MonitorLogsRequest) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MonitorLogsRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *MonitorLogsRequest) GetMulticastIp() string {
	if x != nil {
		return x.MulticastIp
	}
	return ""
}

func (x *MonitorLogsRequest) GetBeforeStatus() int64 {
	if x != nil {
		return x.BeforeStatus
	}
	return 0
}

func (x *MonitorLogsRequest) GetBeforeSignalStatus() bool {
	if x != nil {
		return x.BeforeSignalStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetBeforeVideoStatus() bool {
	if x != nil {
		return x.BeforeVideoStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetBeforeAudioStatus() bool {
	if x != nil {
		return x.BeforeAudioStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetAfterStatus() int64 {
	if x != nil {
		return x.AfterStatus
	}
	return 0
}

func (x *MonitorLogsRequest) GetAfterSignalStatus() bool {
	if x != nil {
		return x.AfterSignalStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetAfterVideoStatus() bool {
	if x != nil {
		return x.AfterVideoStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetAfterAudioStatus() bool {
	if x != nil {
		return x.AfterAudioStatus
	}
	return false
}

func (x *MonitorLogsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MonitorLogsRequest) GetDateCreate() string {
	if x != nil {
		return x.DateCreate
	}
	return ""
}

type MonitorLogsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId     int64  `protobuf:"varint,1,opt,name=agent_id,proto3" json:"agent_id,omitempty"`
	ProfileId   int64  `protobuf:"varint,2,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	MonitorId   int64  `protobuf:"varint,3,opt,name=monitor_id,proto3" json:"monitor_id,omitempty"`
	ChannelId   int64  `protobuf:"varint,4,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	MulticastIp string `protobuf:"bytes,5,opt,name=multicast_ip,proto3" json:"multicast_ip,omitempty"`
}

func (x *MonitorLogsFilter) Reset() {
	*x = MonitorLogsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_logging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLogsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLogsFilter) ProtoMessage() {}

func (x *MonitorLogsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_logging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLogsFilter.ProtoReflect.Descriptor instead.
func (*MonitorLogsFilter) Descriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{2}
}

func (x *MonitorLogsFilter) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *MonitorLogsFilter) GetProfileId() int64 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *MonitorLogsFilter) GetMonitorId() int64 {
	if x != nil {
		return x.MonitorId
	}
	return 0
}

func (x *MonitorLogsFilter) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MonitorLogsFilter) GetMulticastIp() string {
	if x != nil {
		return x.MulticastIp
	}
	return ""
}

type MonitorLogsGetAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorLogsGetAll) Reset() {
	*x = MonitorLogsGetAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_logging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLogsGetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLogsGetAll) ProtoMessage() {}

func (x *MonitorLogsGetAll) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_logging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLogsGetAll.ProtoReflect.Descriptor instead.
func (*MonitorLogsGetAll) Descriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{3}
}

type MonitorLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Status
	Status MonitorLogsResponseStatus `protobuf:"varint,1,opt,name=Status,json=status,proto3,enum=proto.MonitorLogsResponseStatus" json:"Status,omitempty"`
	//*
	// Slice of agent object
	MonitorLogs []*MonitorLogs `protobuf:"bytes,2,rep,name=MonitorLogs,json=data,proto3" json:"MonitorLogs,omitempty"`
}

func (x *MonitorLogsResponse) Reset() {
	*x = MonitorLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitor_logging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorLogsResponse) ProtoMessage() {}

func (x *MonitorLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monitor_logging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorLogsResponse.ProtoReflect.Descriptor instead.
func (*MonitorLogsResponse) Descriptor() ([]byte, []int) {
	return file_monitor_logging_proto_rawDescGZIP(), []int{4}
}

func (x *MonitorLogsResponse) GetStatus() MonitorLogsResponseStatus {
	if x != nil {
		return x.Status
	}
	return MonitorLogsResponseStatus_FAIL
}

func (x *MonitorLogsResponse) GetMonitorLogs() []*MonitorLogs {
	if x != nil {
		return x.MonitorLogs
	}
	return nil
}

var File_monitor_logging_proto protoreflect.FileDescriptor

var file_monitor_logging_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99,
	0x05, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x90, 0x05, 0x0a, 0x12, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0x7e, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x32, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x32, 0xd3, 0x01, 0x0a,
	0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x47, 0x65, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x70, 0x74, 0x76, 0x2d, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitor_logging_proto_rawDescOnce sync.Once
	file_monitor_logging_proto_rawDescData = file_monitor_logging_proto_rawDesc
)

func file_monitor_logging_proto_rawDescGZIP() []byte {
	file_monitor_logging_proto_rawDescOnce.Do(func() {
		file_monitor_logging_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitor_logging_proto_rawDescData)
	})
	return file_monitor_logging_proto_rawDescData
}

var file_monitor_logging_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_monitor_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_monitor_logging_proto_goTypes = []interface{}{
	(MonitorLogsResponseStatus)(0), // 0: proto.MonitorLogsResponseStatus
	(*MonitorLogs)(nil),            // 1: proto.MonitorLogs
	(*MonitorLogsRequest)(nil),     // 2: proto.MonitorLogsRequest
	(*MonitorLogsFilter)(nil),      // 3: proto.MonitorLogsFilter
	(*MonitorLogsGetAll)(nil),      // 4: proto.MonitorLogsGetAll
	(*MonitorLogsResponse)(nil),    // 5: proto.MonitorLogsResponse
}
var file_monitor_logging_proto_depIdxs = []int32{
	0, // 0: proto.MonitorLogsResponse.Status:type_name -> proto.MonitorLogsResponseStatus
	1, // 1: proto.MonitorLogsResponse.MonitorLogs:type_name -> proto.MonitorLogs
	4, // 2: proto.MonitorLogsService.Gets:input_type -> proto.MonitorLogsGetAll
	3, // 3: proto.MonitorLogsService.Get:input_type -> proto.MonitorLogsFilter
	2, // 4: proto.MonitorLogsService.Add:input_type -> proto.MonitorLogsRequest
	5, // 5: proto.MonitorLogsService.Gets:output_type -> proto.MonitorLogsResponse
	5, // 6: proto.MonitorLogsService.Get:output_type -> proto.MonitorLogsResponse
	5, // 7: proto.MonitorLogsService.Add:output_type -> proto.MonitorLogsResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_monitor_logging_proto_init() }
func file_monitor_logging_proto_init() {
	if File_monitor_logging_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_monitor_logging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_logging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_logging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLogsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_logging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLogsGetAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitor_logging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitor_logging_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitor_logging_proto_goTypes,
		DependencyIndexes: file_monitor_logging_proto_depIdxs,
		EnumInfos:         file_monitor_logging_proto_enumTypes,
		MessageInfos:      file_monitor_logging_proto_msgTypes,
	}.Build()
	File_monitor_logging_proto = out.File
	file_monitor_logging_proto_rawDesc = nil
	file_monitor_logging_proto_goTypes = nil
	file_monitor_logging_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MonitorLogsServiceClient is the client API for MonitorLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorLogsServiceClient interface {
	//*
	// Get All Monitor Logs
	Gets(ctx context.Context, in *MonitorLogsGetAll, opts ...grpc.CallOption) (*MonitorLogsResponse, error)
	//*
	// Get Monitor Logs
	Get(ctx context.Context, in *MonitorLogsFilter, opts ...grpc.CallOption) (*MonitorLogsResponse, error)
	//*
	// Add Monitor Logs
	Add(ctx context.Context, in *MonitorLogsRequest, opts ...grpc.CallOption) (*MonitorLogsResponse, error)
}

type monitorLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorLogsServiceClient(cc grpc.ClientConnInterface) MonitorLogsServiceClient {
	return &monitorLogsServiceClient{cc}
}

func (c *monitorLogsServiceClient) Gets(ctx context.Context, in *MonitorLogsGetAll, opts ...grpc.CallOption) (*MonitorLogsResponse, error) {
	out := new(MonitorLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.MonitorLogsService/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorLogsServiceClient) Get(ctx context.Context, in *MonitorLogsFilter, opts ...grpc.CallOption) (*MonitorLogsResponse, error) {
	out := new(MonitorLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.MonitorLogsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorLogsServiceClient) Add(ctx context.Context, in *MonitorLogsRequest, opts ...grpc.CallOption) (*MonitorLogsResponse, error) {
	out := new(MonitorLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.MonitorLogsService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorLogsServiceServer is the server API for MonitorLogsService service.
type MonitorLogsServiceServer interface {
	//*
	// Get All Monitor Logs
	Gets(context.Context, *MonitorLogsGetAll) (*MonitorLogsResponse, error)
	//*
	// Get Monitor Logs
	Get(context.Context, *MonitorLogsFilter) (*MonitorLogsResponse, error)
	//*
	// Add Monitor Logs
	Add(context.Context, *MonitorLogsRequest) (*MonitorLogsResponse, error)
}

// UnimplementedMonitorLogsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorLogsServiceServer struct {
}

func (*UnimplementedMonitorLogsServiceServer) Gets(context.Context, *MonitorLogsGetAll) (*MonitorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (*UnimplementedMonitorLogsServiceServer) Get(context.Context, *MonitorLogsFilter) (*MonitorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedMonitorLogsServiceServer) Add(context.Context, *MonitorLogsRequest) (*MonitorLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterMonitorLogsServiceServer(s *grpc.Server, srv MonitorLogsServiceServer) {
	s.RegisterService(&_MonitorLogsService_serviceDesc, srv)
}

func _MonitorLogsService_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorLogsGetAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorLogsServiceServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonitorLogsService/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorLogsServiceServer).Gets(ctx, req.(*MonitorLogsGetAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorLogsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorLogsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorLogsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonitorLogsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorLogsServiceServer).Get(ctx, req.(*MonitorLogsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonitorLogsService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorLogsServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MonitorLogsService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorLogsServiceServer).Add(ctx, req.(*MonitorLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonitorLogsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MonitorLogsService",
	HandlerType: (*MonitorLogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Gets",
			Handler:    _MonitorLogsService_Gets_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MonitorLogsService_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _MonitorLogsService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitor-logging.proto",
}
